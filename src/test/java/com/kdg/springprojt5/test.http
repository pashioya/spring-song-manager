#write HTTP request messages for each endpoint and possible response status code.
#For example, if you have an endpoint for retrieving a single book by ID, you'd have to write HTTP request messages that ...
#... trigger a 200
#... trigger a 404
#Don't forget your HTTP headers!

###
#Album REST API Starts
###
#          Retrieve Single Artsits Albums
#To trigger a 200 (OK) response status code:
GET http://localhost:8080/api/artist/1/albums
Accept: application/json
###
#To trigger a 404 (Not Found) response status code:
GET http://localhost:8080/api/artist/1000/albums
Accept: application/json

#         Retrieve Single Album
###
#To trigger a 200 (OK) response status code:
GET http://localhost:8080/api/album/1
Accept: application/json
###
#To trigger a 404 (Not Found) response status code:
GET http://localhost:8080/api/album/1000
Accept: application/json

#         Delete Single Album
###
#To trigger a 200 (OK) response status code:
DELETE http://localhost:8080/api/album/1/delete
###
#To trigger a 404 (Not Found) response status code:
DELETE http://localhost:8080/api/album/1000/delete

#         Create Single Album
###
#To trigger a 201 (Created) response status code:
POST http://localhost:8080/api/album/create
Accept: application/json
Content-Type: application/json
{
    "title": "The Dark Side of the Moon",
    "releaseDate": "1973-03-01",
    "recordLabel": "Harvest",
    "genre": "Progressive Rock",
    "artist": {
        "id": 1
    }
}
###
#To trigger a 400 (Bad Request) response status code:
POST http://localhost:8080/api/album/create
Accept: application/json
Content-Type: application/xml
<album>
    <title>The Dark Side of the Moon</title>
    <releaseDate>1973-03-01</releaseDate>
    <recordLabel>Harvest</recordLabel>
    <genre>Progressive Rock</genre>
    <artist>
        <id>1</id>
    </artist>
</album>

#         Update Single Album
###
#To trigger a 200 (OK) response status code:
PUT http://localhost:8080/api/album/1/update
Accept: application/json
Content-Type: application/json
{
    "title": "The Dark Side of the Moon",
    "releaseDate": "1973-03-01",
    "recordLabel": "Harvest",
    "genre": "Progressive Rock",
    "artist": {
        "id": 1
    }
}
###
#To trigger a 400 (Bad Request) response status code:
PUT http://localhost:8080/api/album/1/update
Accept: application/json
Content-Type: application/xml
<album>
    <title>The Dark Side of the Moon</title>
    <releaseDate>1973-03-01</releaseDate>
    <recordLabel>Harvest</recordLabel>
    <genre>Progressive Rock</genre>
    <artist>
        <id>1</id>
    </artist>
</album>
###
#To trigger a 404 (Not Found) response status code:
PUT http://localhost:8080/api/album/1000/update
Accept: application/json
Content-Type: application/json
{
    "title": "The Dark Side of the Moon",
    "releaseDate": "1973-03-01",
    "recordLabel": "Harvest",
    "genre": "Progressive Rock",
    "artist": {
        "id": 1
    }
}

###
#Album REST API Ends
###

###
#Artist REST API Starts
###
#         Retrieve Single Artist
###
#To trigger a 200 (OK) response status code:
GET http://localhost:8080/api/artist/1
Accept: application/json
###
#To trigger a 404 (Not Found) response status code:
GET http://localhost:8080/api/artist/1000
Accept: application/json

#         Delete Single Artist
###
#To trigger a 200 (OK) response status code:
DELETE http://localhost:8080/api/artist/1/delete
###
#To trigger a 404 (Not Found) response status code:
DELETE http://localhost:8080/api/artist/1000/delete

#         Create Single Artist
###
#To trigger a 201 (Created) response status code:
POST http://localhost:8080/api/artist/create
Accept: application/json
Content-Type: application/json
{
    "name": "Pink Floyd",
    "genre": "Progressive Rock",
    "country": "United Kingdom"
}
###
#To trigger a 400 (Bad Request) response status code:
POST http://localhost:8080/api/artist/create
Accept: application/json
Content-Type: application/xml
<artist>
    <name>Pink Floyd</name>
    <genre>Progressive Rock</genre>
    <country>United Kingdom</country>
</artist>

#         Update Single Artist
###
#To trigger a 200 (OK) response status code:
PUT http://localhost:8080/api/artist/1/update
Accept: application/json
Content-Type: application/json
{
    "name": "Pink Floyd",
    "genre": "Progressive Rock",
    "country": "United Kingdom"
}
###
#To trigger a 400 (Bad Request) response status code:
PUT http://localhost:8080/api/artist/1/update
Accept: application/json
Content-Type: application/xml
<artist>
    <name>Pink Floyd</name>
    <genre>Progressive Rock</genre>
    <country>United Kingdom</country>
</artist>
###
#To trigger a 404 (Not Found) response status code:
PUT http://localhost:8080/api/artist/1000/update
Accept: application/json
Content-Type: application/json
{
    "name": "Pink Floyd",
    "genre": "Progressive Rock",
    "country": "United Kingdom"
}

###
#Artist REST API Ends
###

###
#Song REST API Starts
###
#         Retrieve Single Song
###
#To trigger a 200 (OK) response status code:
GET http://localhost:8080/api/song/1
Accept: application/json
###
#To trigger a 404 (Not Found) response status code:
GET http://localhost:8080/api/song/1000
Accept: application/json

#         Delete Single Song
###
#To trigger a 200 (OK) response status code:
DELETE http://localhost:8080/api/song/1/delete
###
#To trigger a 404 (Not Found) response status code:
DELETE http://localhost:8080/api/song/1000/delete

#         Create Single Song
###
#To trigger a 201 (Created) response status code:
POST http://localhost:8080/api/song/create
Accept: application/json
Content-Type: application/json
{
    "title": "Money",
    "duration": "00:06:47",
    "album": {
        "id": 1
    }
}
###
#To trigger a 400 (Bad Request) response status code:
POST http://localhost:8080/api/song/create
Accept: application/json
Content-Type: application/xml
<song>
    <title>Money</title>
    <duration>00:06:47</duration>
    <album>
        <id>1</id>
    </album>
</song>

#         Update Single Song
###
#To trigger a 200 (OK) response status code:
PUT http://localhost:8080/api/song/1/update
Accept: application/json
Content-Type: application/json
{
    "title": "Money",
    "duration": "00:06:47",
    "album": {
        "id": 1
    }
}
###
#To trigger a 400 (Bad Request) response status code:
PUT http://localhost:8080/api/song/1/update
Accept: application/json
Content-Type: application/xml
<song>
    <title>Money</title>
    <duration>00:06:47</duration>
    <album>
        <id>1</id>
    </album>
</song>
###
#To trigger a 404 (Not Found) response status code:
PUT http://localhost:8080/api/song/1000/update
Accept: application/json
Content-Type: application/json
{
    "title": "Money",
    "duration": "00:06:47",
    "album": {
        "id": 1
    }
}

###
#Song REST API Ends
###



